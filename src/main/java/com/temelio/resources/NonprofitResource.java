package com.temelio.resources;

import com.temelio.builders.GrantSubmissionBuilder;
import com.temelio.builders.NonprofitBuilder;
import com.temelio.core.models.GrantSubmission;
import com.temelio.core.models.Nonprofit;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import java.util.ArrayList;
import java.util.List;

@Path("/api/nonprofits")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class NonprofitResource {
    private final List<Nonprofit> nonprofits;
    public NonprofitResource() {
        this.nonprofits = new ArrayList<>();
    }
//     - GET /nonprofits
//    - Returns a list of nonprofits
    @GET
    public List<Nonprofit> getNonProfits() {
        return nonprofits;
    }
//  - POST /nonprofits
//    - Creates a new nonprofit (id is autogenerated)
    @POST
    public Nonprofit createNonProfit(Nonprofit nonProfit) {
        nonprofits.add(nonProfit);
        return nonProfit;
    }
//  - GET /nonprofits/{id}
//    - Returns a nonprofit by id
    @GET
    @Path("/{id}")
    public Nonprofit getNonprofitById(@PathParam("id") int id) {
//        System.out.println(id);
        if (id < 0 || id >= nonprofits.size())
            throw new NotFoundException("invalid nonprofit Id");

        return nonprofits.get(id);
    }
//  - PUT /nonprofits/{id}
//    - Updates a nonprofit by i
    @PUT
    @Path("/{id}")
    public Nonprofit updateNonProfit(@PathParam("id") int id, Nonprofit updatedNonprofit) {
       getNonprofitById(id);

       Nonprofit updated = new NonprofitBuilder(nonprofits.get(id))
               .updateFieldsFromUserInput(updatedNonprofit)
               .build();

       nonprofits.set(id, updated);

       return updated;
    }

//   - GET /nonprofits/{id}/submissions
//    - Returns a list of submissions for a nonprofit
    @GET
    @Path("/{id}/submissions")
    public List<GrantSubmission> getSubmissions(@PathParam("id") int id) {
        // check for valid nonprofitId
        getNonprofitById(id);

        return nonprofits.get(id).getGrantSubmissions();
    }

//  - POST /nonprofits/{id}/submissions
//    - Creates a new submission for a nonprofit (id is autogenerated)
    @POST
    @Path("/{id}/submissions")
    public GrantSubmission createSubmission(@PathParam("id") int id, GrantSubmission grantSubmission) {
        // check for valid nonprofitId
        getNonprofitById(id);

        grantSubmission.setNonprofitId(id);
        this.nonprofits.get(id).getGrantSubmissions().add(grantSubmission);

        return grantSubmission;
    }
//  - GET /nonprofits/{id}/submissions/{id}
//    - Returns a submission by id for a nonprofit
    @GET
    @Path("/{nonprofitId}/submissions/{submissionId}")
    public GrantSubmission getSubmissionByNonprofitId(@PathParam("nonprofitId") int nonprofitId, @PathParam("submissionId") int submissionId) {
        // check for valid nonprofitId
        checkForValid(nonprofitId, submissionId);

        GrantSubmission grantSubmission = nonprofits.get(nonprofitId).getGrantSubmissions().get(submissionId);

        return grantSubmission;
    }
//  - PUT /nonprofits/{id}/submissions/{id}
//    - Updates a submission by id for a nonprofit
    @PUT
    @Path("/{nonprofitId}/submissions/{submissionId}")
    public GrantSubmission updateSubmissionByNonprofitId(@PathParam("nonprofitId") int nonprofitId, @PathParam("submissionId") int submissionId, GrantSubmission updatedSubmission) {
        // check for valid nonprofitId
       checkForValid(nonprofitId, submissionId);

        GrantSubmission updated = new GrantSubmissionBuilder(nonprofits.get(nonprofitId).getGrantSubmissions().get(submissionId))
                .updateFieldsFromUserInput(updatedSubmission)
                .build();

        nonprofits.get(nonprofitId).getGrantSubmissions().set(submissionId, updatedSubmission);
        return updated;
    }

//  - GET /nonprofits/submissions
//    - Returns a list of submissions for all nonprofit
    @GET
    @Path("/submissions")
    public List<List<GrantSubmission>> grantSubmissionlist() {
        List<List<GrantSubmission>> grantSubmissions = new ArrayList<>();

        for (Nonprofit nonprofit : nonprofits) {
            grantSubmissions.add(nonprofit.getGrantSubmissions());
        }

        return grantSubmissions;
    }

    public void checkForValid(int nonprofitId, int submissionId) {
        // check for valid nonprofitId
        getNonprofitById(nonprofitId);

        List<GrantSubmission> grantSubmissions = nonprofits.get(nonprofitId).grantSubmissions;

        if (submissionId < 0 || submissionId >= grantSubmissions.size()) {
            throw new NotFoundException("invalid submission Id");
        }
    }
}
